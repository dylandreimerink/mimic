package mimic

// Code generated by 'go run inst_gen.go | gofmt > inst.go' DO NOT EDIT

import "github.com/cilium/ebpf/asm"

func InstALU32AddIMM(i asm.Instruction, process *Process) error {
	dst := process.Registers.Get(i.Dst)
	return process.Registers.Set(i.Dst, uint64(uint32(dst)+uint32(i.Constant)))
}

func InstALU64AddIMM(i asm.Instruction, process *Process) error {
	dst := process.Registers.Get(i.Dst)
	return process.Registers.Set(i.Dst, dst+uint64(i.Constant))
}

func InstALU32AddReg(i asm.Instruction, process *Process) error {
	dst := process.Registers.Get(i.Dst)
	src := process.Registers.Get(i.Src)
	return process.Registers.Set(i.Dst, uint64(uint32(dst)+uint32(src)))
}

func InstALU64AddReg(i asm.Instruction, process *Process) error {
	dst := process.Registers.Get(i.Dst)
	src := process.Registers.Get(i.Src)
	return process.Registers.Set(i.Dst, dst+src)
}

func InstALU32SubIMM(i asm.Instruction, process *Process) error {
	dst := process.Registers.Get(i.Dst)
	return process.Registers.Set(i.Dst, uint64(uint32(dst)-uint32(i.Constant)))
}

func InstALU64SubIMM(i asm.Instruction, process *Process) error {
	dst := process.Registers.Get(i.Dst)
	return process.Registers.Set(i.Dst, dst-uint64(i.Constant))
}

func InstALU32SubReg(i asm.Instruction, process *Process) error {
	dst := process.Registers.Get(i.Dst)
	src := process.Registers.Get(i.Src)
	return process.Registers.Set(i.Dst, uint64(uint32(dst)-uint32(src)))
}

func InstALU64SubReg(i asm.Instruction, process *Process) error {
	dst := process.Registers.Get(i.Dst)
	src := process.Registers.Get(i.Src)
	return process.Registers.Set(i.Dst, dst-src)
}

func InstALU32MulIMM(i asm.Instruction, process *Process) error {
	dst := process.Registers.Get(i.Dst)
	return process.Registers.Set(i.Dst, uint64(uint32(dst)*uint32(i.Constant)))
}

func InstALU64MulIMM(i asm.Instruction, process *Process) error {
	dst := process.Registers.Get(i.Dst)
	return process.Registers.Set(i.Dst, dst*uint64(i.Constant))
}

func InstALU32MulReg(i asm.Instruction, process *Process) error {
	dst := process.Registers.Get(i.Dst)
	src := process.Registers.Get(i.Src)
	return process.Registers.Set(i.Dst, uint64(uint32(dst)*uint32(src)))
}

func InstALU64MulReg(i asm.Instruction, process *Process) error {
	dst := process.Registers.Get(i.Dst)
	src := process.Registers.Get(i.Src)
	return process.Registers.Set(i.Dst, dst*src)
}

func InstALU32DivIMM(i asm.Instruction, process *Process) error {
	dst := process.Registers.Get(i.Dst)
	return process.Registers.Set(i.Dst, uint64(uint32(dst)/uint32(i.Constant)))
}

func InstALU64DivIMM(i asm.Instruction, process *Process) error {
	dst := process.Registers.Get(i.Dst)
	return process.Registers.Set(i.Dst, dst/uint64(i.Constant))
}

func InstALU32DivReg(i asm.Instruction, process *Process) error {
	dst := process.Registers.Get(i.Dst)
	src := process.Registers.Get(i.Src)
	return process.Registers.Set(i.Dst, uint64(uint32(dst)/uint32(src)))
}

func InstALU64DivReg(i asm.Instruction, process *Process) error {
	dst := process.Registers.Get(i.Dst)
	src := process.Registers.Get(i.Src)
	return process.Registers.Set(i.Dst, dst/src)
}

func InstALU32OrIMM(i asm.Instruction, process *Process) error {
	dst := process.Registers.Get(i.Dst)
	return process.Registers.Set(i.Dst, uint64(uint32(dst)|uint32(i.Constant)))
}

func InstALU64OrIMM(i asm.Instruction, process *Process) error {
	dst := process.Registers.Get(i.Dst)
	return process.Registers.Set(i.Dst, dst|uint64(i.Constant))
}

func InstALU32OrReg(i asm.Instruction, process *Process) error {
	dst := process.Registers.Get(i.Dst)
	src := process.Registers.Get(i.Src)
	return process.Registers.Set(i.Dst, uint64(uint32(dst)|uint32(src)))
}

func InstALU64OrReg(i asm.Instruction, process *Process) error {
	dst := process.Registers.Get(i.Dst)
	src := process.Registers.Get(i.Src)
	return process.Registers.Set(i.Dst, dst|src)
}

func InstALU32AndIMM(i asm.Instruction, process *Process) error {
	dst := process.Registers.Get(i.Dst)
	return process.Registers.Set(i.Dst, uint64(uint32(dst)&uint32(i.Constant)))
}

func InstALU64AndIMM(i asm.Instruction, process *Process) error {
	dst := process.Registers.Get(i.Dst)
	return process.Registers.Set(i.Dst, dst&uint64(i.Constant))
}

func InstALU32AndReg(i asm.Instruction, process *Process) error {
	dst := process.Registers.Get(i.Dst)
	src := process.Registers.Get(i.Src)
	return process.Registers.Set(i.Dst, uint64(uint32(dst)&uint32(src)))
}

func InstALU64AndReg(i asm.Instruction, process *Process) error {
	dst := process.Registers.Get(i.Dst)
	src := process.Registers.Get(i.Src)
	return process.Registers.Set(i.Dst, dst&src)
}

func InstALU32LShIMM(i asm.Instruction, process *Process) error {
	dst := process.Registers.Get(i.Dst)
	return process.Registers.Set(i.Dst, uint64(uint32(dst)<<uint32(i.Constant)))
}

func InstALU64LShIMM(i asm.Instruction, process *Process) error {
	dst := process.Registers.Get(i.Dst)
	return process.Registers.Set(i.Dst, dst<<uint64(i.Constant))
}

func InstALU32LShReg(i asm.Instruction, process *Process) error {
	dst := process.Registers.Get(i.Dst)
	src := process.Registers.Get(i.Src)
	return process.Registers.Set(i.Dst, uint64(uint32(dst)<<uint32(src)))
}

func InstALU64LShReg(i asm.Instruction, process *Process) error {
	dst := process.Registers.Get(i.Dst)
	src := process.Registers.Get(i.Src)
	return process.Registers.Set(i.Dst, dst<<src)
}

func InstALU32RShIMM(i asm.Instruction, process *Process) error {
	dst := process.Registers.Get(i.Dst)
	return process.Registers.Set(i.Dst, uint64(uint32(dst)>>uint32(i.Constant)))
}

func InstALU64RShIMM(i asm.Instruction, process *Process) error {
	dst := process.Registers.Get(i.Dst)
	return process.Registers.Set(i.Dst, dst>>uint64(i.Constant))
}

func InstALU32RShReg(i asm.Instruction, process *Process) error {
	dst := process.Registers.Get(i.Dst)
	src := process.Registers.Get(i.Src)
	return process.Registers.Set(i.Dst, uint64(uint32(dst)>>uint32(src)))
}

func InstALU64RShReg(i asm.Instruction, process *Process) error {
	dst := process.Registers.Get(i.Dst)
	src := process.Registers.Get(i.Src)
	return process.Registers.Set(i.Dst, dst>>src)
}

func InstALU32ModIMM(i asm.Instruction, process *Process) error {
	dst := process.Registers.Get(i.Dst)
	return process.Registers.Set(i.Dst, uint64(uint32(dst)%uint32(i.Constant)))
}

func InstALU64ModIMM(i asm.Instruction, process *Process) error {
	dst := process.Registers.Get(i.Dst)
	return process.Registers.Set(i.Dst, dst%uint64(i.Constant))
}

func InstALU32ModReg(i asm.Instruction, process *Process) error {
	dst := process.Registers.Get(i.Dst)
	src := process.Registers.Get(i.Src)
	return process.Registers.Set(i.Dst, uint64(uint32(dst)%uint32(src)))
}

func InstALU64ModReg(i asm.Instruction, process *Process) error {
	dst := process.Registers.Get(i.Dst)
	src := process.Registers.Get(i.Src)
	return process.Registers.Set(i.Dst, dst%src)
}

func InstALU32XorIMM(i asm.Instruction, process *Process) error {
	dst := process.Registers.Get(i.Dst)
	return process.Registers.Set(i.Dst, uint64(uint32(dst)^uint32(i.Constant)))
}

func InstALU64XorIMM(i asm.Instruction, process *Process) error {
	dst := process.Registers.Get(i.Dst)
	return process.Registers.Set(i.Dst, dst^uint64(i.Constant))
}

func InstALU32XorReg(i asm.Instruction, process *Process) error {
	dst := process.Registers.Get(i.Dst)
	src := process.Registers.Get(i.Src)
	return process.Registers.Set(i.Dst, uint64(uint32(dst)^uint32(src)))
}

func InstALU64XorReg(i asm.Instruction, process *Process) error {
	dst := process.Registers.Get(i.Dst)
	src := process.Registers.Get(i.Src)
	return process.Registers.Set(i.Dst, dst^src)
}

func InstJump32JEqIMM(i asm.Instruction, process *Process) error {
	dst := process.Registers.Get(i.Dst)
	if uint32(dst) == uint32(i.Constant) {
		process.Registers.PC += int(i.Offset)
	}

	return nil
}

func InstJump64JEqIMM(i asm.Instruction, process *Process) error {
	dst := process.Registers.Get(i.Dst)
	if dst == uint64(i.Constant) {
		process.Registers.PC += int(i.Offset)
	}

	return nil
}

func InstJump32JEqReg(i asm.Instruction, process *Process) error {
	src := process.Registers.Get(i.Src)
	dst := process.Registers.Get(i.Dst)
	if uint32(dst) == uint32(src) {
		process.Registers.PC += int(i.Offset)
	}

	return nil
}

func InstJump64JEqReg(i asm.Instruction, process *Process) error {
	src := process.Registers.Get(i.Src)
	dst := process.Registers.Get(i.Dst)
	if dst == src {
		process.Registers.PC += int(i.Offset)
	}

	return nil
}

func InstJump32JGTIMM(i asm.Instruction, process *Process) error {
	dst := process.Registers.Get(i.Dst)
	if uint32(dst) > uint32(i.Constant) {
		process.Registers.PC += int(i.Offset)
	}

	return nil
}

func InstJump64JGTIMM(i asm.Instruction, process *Process) error {
	dst := process.Registers.Get(i.Dst)
	if dst > uint64(i.Constant) {
		process.Registers.PC += int(i.Offset)
	}

	return nil
}

func InstJump32JGTReg(i asm.Instruction, process *Process) error {
	src := process.Registers.Get(i.Src)
	dst := process.Registers.Get(i.Dst)
	if uint32(dst) > uint32(src) {
		process.Registers.PC += int(i.Offset)
	}

	return nil
}

func InstJump64JGTReg(i asm.Instruction, process *Process) error {
	src := process.Registers.Get(i.Src)
	dst := process.Registers.Get(i.Dst)
	if dst > src {
		process.Registers.PC += int(i.Offset)
	}

	return nil
}

func InstJump32JGEIMM(i asm.Instruction, process *Process) error {
	dst := process.Registers.Get(i.Dst)
	if uint32(dst) >= uint32(i.Constant) {
		process.Registers.PC += int(i.Offset)
	}

	return nil
}

func InstJump64JGEIMM(i asm.Instruction, process *Process) error {
	dst := process.Registers.Get(i.Dst)
	if dst >= uint64(i.Constant) {
		process.Registers.PC += int(i.Offset)
	}

	return nil
}

func InstJump32JGEReg(i asm.Instruction, process *Process) error {
	src := process.Registers.Get(i.Src)
	dst := process.Registers.Get(i.Dst)
	if uint32(dst) >= uint32(src) {
		process.Registers.PC += int(i.Offset)
	}

	return nil
}

func InstJump64JGEReg(i asm.Instruction, process *Process) error {
	src := process.Registers.Get(i.Src)
	dst := process.Registers.Get(i.Dst)
	if dst >= src {
		process.Registers.PC += int(i.Offset)
	}

	return nil
}

func InstJump32JNEIMM(i asm.Instruction, process *Process) error {
	dst := process.Registers.Get(i.Dst)
	if uint32(dst) != uint32(i.Constant) {
		process.Registers.PC += int(i.Offset)
	}

	return nil
}

func InstJump64JNEIMM(i asm.Instruction, process *Process) error {
	dst := process.Registers.Get(i.Dst)
	if dst != uint64(i.Constant) {
		process.Registers.PC += int(i.Offset)
	}

	return nil
}

func InstJump32JNEReg(i asm.Instruction, process *Process) error {
	src := process.Registers.Get(i.Src)
	dst := process.Registers.Get(i.Dst)
	if uint32(dst) != uint32(src) {
		process.Registers.PC += int(i.Offset)
	}

	return nil
}

func InstJump64JNEReg(i asm.Instruction, process *Process) error {
	src := process.Registers.Get(i.Src)
	dst := process.Registers.Get(i.Dst)
	if dst != src {
		process.Registers.PC += int(i.Offset)
	}

	return nil
}

func InstJump32JSGTIMM(i asm.Instruction, process *Process) error {
	dst := process.Registers.Get(i.Dst)
	if int32(dst) > int32(i.Constant) {
		process.Registers.PC += int(i.Offset)
	}

	return nil
}

func InstJump64JSGTIMM(i asm.Instruction, process *Process) error {
	dst := process.Registers.Get(i.Dst)
	if int64(dst) > int64(i.Constant) {
		process.Registers.PC += int(i.Offset)
	}

	return nil
}

func InstJump32JSGTReg(i asm.Instruction, process *Process) error {
	src := process.Registers.Get(i.Src)
	dst := process.Registers.Get(i.Dst)
	if int32(dst) > int32(src) {
		process.Registers.PC += int(i.Offset)
	}

	return nil
}

func InstJump64JSGTReg(i asm.Instruction, process *Process) error {
	src := process.Registers.Get(i.Src)
	dst := process.Registers.Get(i.Dst)
	if int64(dst) > int64(src) {
		process.Registers.PC += int(i.Offset)
	}

	return nil
}

func InstJump32JSGEIMM(i asm.Instruction, process *Process) error {
	dst := process.Registers.Get(i.Dst)
	if int32(dst) >= int32(i.Constant) {
		process.Registers.PC += int(i.Offset)
	}

	return nil
}

func InstJump64JSGEIMM(i asm.Instruction, process *Process) error {
	dst := process.Registers.Get(i.Dst)
	if int64(dst) >= int64(i.Constant) {
		process.Registers.PC += int(i.Offset)
	}

	return nil
}

func InstJump32JSGEReg(i asm.Instruction, process *Process) error {
	src := process.Registers.Get(i.Src)
	dst := process.Registers.Get(i.Dst)
	if int32(dst) >= int32(src) {
		process.Registers.PC += int(i.Offset)
	}

	return nil
}

func InstJump64JSGEReg(i asm.Instruction, process *Process) error {
	src := process.Registers.Get(i.Src)
	dst := process.Registers.Get(i.Dst)
	if int64(dst) >= int64(src) {
		process.Registers.PC += int(i.Offset)
	}

	return nil
}

func InstJump32JLTIMM(i asm.Instruction, process *Process) error {
	dst := process.Registers.Get(i.Dst)
	if uint32(dst) < uint32(i.Constant) {
		process.Registers.PC += int(i.Offset)
	}

	return nil
}

func InstJump64JLTIMM(i asm.Instruction, process *Process) error {
	dst := process.Registers.Get(i.Dst)
	if dst < uint64(i.Constant) {
		process.Registers.PC += int(i.Offset)
	}

	return nil
}

func InstJump32JLTReg(i asm.Instruction, process *Process) error {
	src := process.Registers.Get(i.Src)
	dst := process.Registers.Get(i.Dst)
	if uint32(dst) < uint32(src) {
		process.Registers.PC += int(i.Offset)
	}

	return nil
}

func InstJump64JLTReg(i asm.Instruction, process *Process) error {
	src := process.Registers.Get(i.Src)
	dst := process.Registers.Get(i.Dst)
	if dst < src {
		process.Registers.PC += int(i.Offset)
	}

	return nil
}

func InstJump32JLEIMM(i asm.Instruction, process *Process) error {
	dst := process.Registers.Get(i.Dst)
	if uint32(dst) <= uint32(i.Constant) {
		process.Registers.PC += int(i.Offset)
	}

	return nil
}

func InstJump64JLEIMM(i asm.Instruction, process *Process) error {
	dst := process.Registers.Get(i.Dst)
	if dst <= uint64(i.Constant) {
		process.Registers.PC += int(i.Offset)
	}

	return nil
}

func InstJump32JLEReg(i asm.Instruction, process *Process) error {
	src := process.Registers.Get(i.Src)
	dst := process.Registers.Get(i.Dst)
	if uint32(dst) <= uint32(src) {
		process.Registers.PC += int(i.Offset)
	}

	return nil
}

func InstJump64JLEReg(i asm.Instruction, process *Process) error {
	src := process.Registers.Get(i.Src)
	dst := process.Registers.Get(i.Dst)
	if dst <= src {
		process.Registers.PC += int(i.Offset)
	}

	return nil
}

func InstJump32JSLTIMM(i asm.Instruction, process *Process) error {
	dst := process.Registers.Get(i.Dst)
	if int32(dst) < int32(i.Constant) {
		process.Registers.PC += int(i.Offset)
	}

	return nil
}

func InstJump64JSLTIMM(i asm.Instruction, process *Process) error {
	dst := process.Registers.Get(i.Dst)
	if int64(dst) < int64(i.Constant) {
		process.Registers.PC += int(i.Offset)
	}

	return nil
}

func InstJump32JSLTReg(i asm.Instruction, process *Process) error {
	src := process.Registers.Get(i.Src)
	dst := process.Registers.Get(i.Dst)
	if int32(dst) < int32(src) {
		process.Registers.PC += int(i.Offset)
	}

	return nil
}

func InstJump64JSLTReg(i asm.Instruction, process *Process) error {
	src := process.Registers.Get(i.Src)
	dst := process.Registers.Get(i.Dst)
	if int64(dst) < int64(src) {
		process.Registers.PC += int(i.Offset)
	}

	return nil
}

func InstJump32JSLEIMM(i asm.Instruction, process *Process) error {
	dst := process.Registers.Get(i.Dst)
	if int32(dst) <= int32(i.Constant) {
		process.Registers.PC += int(i.Offset)
	}

	return nil
}

func InstJump64JSLEIMM(i asm.Instruction, process *Process) error {
	dst := process.Registers.Get(i.Dst)
	if int64(dst) <= int64(i.Constant) {
		process.Registers.PC += int(i.Offset)
	}

	return nil
}

func InstJump32JSLEReg(i asm.Instruction, process *Process) error {
	src := process.Registers.Get(i.Src)
	dst := process.Registers.Get(i.Dst)
	if int32(dst) <= int32(src) {
		process.Registers.PC += int(i.Offset)
	}

	return nil
}

func InstJump64JSLEReg(i asm.Instruction, process *Process) error {
	src := process.Registers.Get(i.Src)
	dst := process.Registers.Get(i.Dst)
	if int64(dst) <= int64(src) {
		process.Registers.PC += int(i.Offset)
	}

	return nil
}

func initGen() {
	instructions[asm.OpCode(asm.ALUClass).SetALUOp(asm.Add)] = InstALU32AddIMM
	instructions[asm.OpCode(asm.ALU64Class).SetALUOp(asm.Add)] = InstALU64AddIMM
	instructions[asm.OpCode(asm.ALUClass).SetALUOp(asm.Add)|asm.OpCode(asm.RegSource)] = InstALU32AddReg
	instructions[asm.OpCode(asm.ALU64Class).SetALUOp(asm.Add)|asm.OpCode(asm.RegSource)] = InstALU64AddReg
	instructions[asm.OpCode(asm.ALUClass).SetALUOp(asm.Sub)] = InstALU32SubIMM
	instructions[asm.OpCode(asm.JumpClass).SetJumpOp(asm.JEq)] = InstJump64JEqIMM
	instructions[asm.OpCode(asm.Jump32Class).SetJumpOp(asm.JEq)] = InstJump32JEqIMM
	instructions[asm.OpCode(asm.ALU64Class).SetALUOp(asm.Sub)] = InstALU64SubIMM
	instructions[asm.OpCode(asm.ALUClass).SetALUOp(asm.Sub)|asm.OpCode(asm.RegSource)] = InstALU32SubReg
	instructions[asm.OpCode(asm.ALU64Class).SetJumpOp(asm.JEq)|asm.OpCode(asm.RegSource)] = InstJump64JEqReg
	instructions[asm.OpCode(asm.JumpClass).SetJumpOp(asm.JEq)|asm.OpCode(asm.RegSource)] = InstJump32JEqReg
	instructions[asm.OpCode(asm.ALU64Class).SetALUOp(asm.Sub)|asm.OpCode(asm.RegSource)] = InstALU64SubReg
	instructions[asm.OpCode(asm.ALUClass).SetALUOp(asm.Mul)] = InstALU32MulIMM
	instructions[asm.OpCode(asm.JumpClass).SetJumpOp(asm.JGT)] = InstJump64JGTIMM
	instructions[asm.OpCode(asm.Jump32Class).SetJumpOp(asm.JGT)] = InstJump32JGTIMM
	instructions[asm.OpCode(asm.ALU64Class).SetALUOp(asm.Mul)] = InstALU64MulIMM
	instructions[asm.OpCode(asm.ALUClass).SetALUOp(asm.Mul)|asm.OpCode(asm.RegSource)] = InstALU32MulReg
	instructions[asm.OpCode(asm.ALU64Class).SetJumpOp(asm.JGT)|asm.OpCode(asm.RegSource)] = InstJump64JGTReg
	instructions[asm.OpCode(asm.JumpClass).SetJumpOp(asm.JGT)|asm.OpCode(asm.RegSource)] = InstJump32JGTReg
	instructions[asm.OpCode(asm.ALU64Class).SetALUOp(asm.Mul)|asm.OpCode(asm.RegSource)] = InstALU64MulReg
	instructions[asm.OpCode(asm.ALUClass).SetALUOp(asm.Div)] = InstALU32DivIMM
	instructions[asm.OpCode(asm.JumpClass).SetJumpOp(asm.JGE)] = InstJump64JGEIMM
	instructions[asm.OpCode(asm.Jump32Class).SetJumpOp(asm.JGE)] = InstJump32JGEIMM
	instructions[asm.OpCode(asm.ALU64Class).SetALUOp(asm.Div)] = InstALU64DivIMM
	instructions[asm.OpCode(asm.ALUClass).SetALUOp(asm.Div)|asm.OpCode(asm.RegSource)] = InstALU32DivReg
	instructions[asm.OpCode(asm.ALU64Class).SetJumpOp(asm.JGE)|asm.OpCode(asm.RegSource)] = InstJump64JGEReg
	instructions[asm.OpCode(asm.JumpClass).SetJumpOp(asm.JGE)|asm.OpCode(asm.RegSource)] = InstJump32JGEReg
	instructions[asm.OpCode(asm.ALU64Class).SetALUOp(asm.Div)|asm.OpCode(asm.RegSource)] = InstALU64DivReg
	instructions[asm.OpCode(asm.ALUClass).SetALUOp(asm.Or)] = InstALU32OrIMM
	instructions[asm.OpCode(asm.ALU64Class).SetALUOp(asm.Or)] = InstALU64OrIMM
	instructions[asm.OpCode(asm.ALUClass).SetALUOp(asm.Or)|asm.OpCode(asm.RegSource)] = InstALU32OrReg
	instructions[asm.OpCode(asm.ALU64Class).SetALUOp(asm.Or)|asm.OpCode(asm.RegSource)] = InstALU64OrReg
	instructions[asm.OpCode(asm.ALUClass).SetALUOp(asm.And)] = InstALU32AndIMM
	instructions[asm.OpCode(asm.JumpClass).SetJumpOp(asm.JNE)] = InstJump64JNEIMM
	instructions[asm.OpCode(asm.Jump32Class).SetJumpOp(asm.JNE)] = InstJump32JNEIMM
	instructions[asm.OpCode(asm.ALU64Class).SetALUOp(asm.And)] = InstALU64AndIMM
	instructions[asm.OpCode(asm.ALUClass).SetALUOp(asm.And)|asm.OpCode(asm.RegSource)] = InstALU32AndReg
	instructions[asm.OpCode(asm.ALU64Class).SetJumpOp(asm.JNE)|asm.OpCode(asm.RegSource)] = InstJump64JNEReg
	instructions[asm.OpCode(asm.JumpClass).SetJumpOp(asm.JNE)|asm.OpCode(asm.RegSource)] = InstJump32JNEReg
	instructions[asm.OpCode(asm.ALU64Class).SetALUOp(asm.And)|asm.OpCode(asm.RegSource)] = InstALU64AndReg
	instructions[asm.OpCode(asm.ALUClass).SetALUOp(asm.LSh)] = InstALU32LShIMM
	instructions[asm.OpCode(asm.JumpClass).SetJumpOp(asm.JSGT)] = InstJump64JSGTIMM
	instructions[asm.OpCode(asm.Jump32Class).SetJumpOp(asm.JSGT)] = InstJump32JSGTIMM
	instructions[asm.OpCode(asm.ALU64Class).SetALUOp(asm.LSh)] = InstALU64LShIMM
	instructions[asm.OpCode(asm.ALUClass).SetALUOp(asm.LSh)|asm.OpCode(asm.RegSource)] = InstALU32LShReg
	instructions[asm.OpCode(asm.ALU64Class).SetJumpOp(asm.JSGT)|asm.OpCode(asm.RegSource)] = InstJump64JSGTReg
	instructions[asm.OpCode(asm.JumpClass).SetJumpOp(asm.JSGT)|asm.OpCode(asm.RegSource)] = InstJump32JSGTReg
	instructions[asm.OpCode(asm.ALU64Class).SetALUOp(asm.LSh)|asm.OpCode(asm.RegSource)] = InstALU64LShReg
	instructions[asm.OpCode(asm.ALUClass).SetALUOp(asm.RSh)] = InstALU32RShIMM
	instructions[asm.OpCode(asm.JumpClass).SetJumpOp(asm.JSGE)] = InstJump64JSGEIMM
	instructions[asm.OpCode(asm.Jump32Class).SetJumpOp(asm.JSGE)] = InstJump32JSGEIMM
	instructions[asm.OpCode(asm.ALU64Class).SetALUOp(asm.RSh)] = InstALU64RShIMM
	instructions[asm.OpCode(asm.ALUClass).SetALUOp(asm.RSh)|asm.OpCode(asm.RegSource)] = InstALU32RShReg
	instructions[asm.OpCode(asm.ALU64Class).SetJumpOp(asm.JSGE)|asm.OpCode(asm.RegSource)] = InstJump64JSGEReg
	instructions[asm.OpCode(asm.JumpClass).SetJumpOp(asm.JSGE)|asm.OpCode(asm.RegSource)] = InstJump32JSGEReg
	instructions[asm.OpCode(asm.ALU64Class).SetALUOp(asm.RSh)|asm.OpCode(asm.RegSource)] = InstALU64RShReg
	instructions[asm.OpCode(asm.ALUClass).SetALUOp(asm.Mod)] = InstALU32ModIMM
	instructions[asm.OpCode(asm.ALU64Class).SetALUOp(asm.Mod)] = InstALU64ModIMM
	instructions[asm.OpCode(asm.ALUClass).SetALUOp(asm.Mod)|asm.OpCode(asm.RegSource)] = InstALU32ModReg
	instructions[asm.OpCode(asm.ALU64Class).SetALUOp(asm.Mod)|asm.OpCode(asm.RegSource)] = InstALU64ModReg
	instructions[asm.OpCode(asm.ALUClass).SetALUOp(asm.Xor)] = InstALU32XorIMM
	instructions[asm.OpCode(asm.JumpClass).SetJumpOp(asm.JLT)] = InstJump64JLTIMM
	instructions[asm.OpCode(asm.Jump32Class).SetJumpOp(asm.JLT)] = InstJump32JLTIMM
	instructions[asm.OpCode(asm.ALU64Class).SetALUOp(asm.Xor)] = InstALU64XorIMM
	instructions[asm.OpCode(asm.ALUClass).SetALUOp(asm.Xor)|asm.OpCode(asm.RegSource)] = InstALU32XorReg
	instructions[asm.OpCode(asm.ALU64Class).SetJumpOp(asm.JLT)|asm.OpCode(asm.RegSource)] = InstJump64JLTReg
	instructions[asm.OpCode(asm.JumpClass).SetJumpOp(asm.JLT)|asm.OpCode(asm.RegSource)] = InstJump32JLTReg
	instructions[asm.OpCode(asm.ALU64Class).SetALUOp(asm.Xor)|asm.OpCode(asm.RegSource)] = InstALU64XorReg
	instructions[asm.OpCode(asm.JumpClass).SetJumpOp(asm.JLE)] = InstJump64JLEIMM
	instructions[asm.OpCode(asm.Jump32Class).SetJumpOp(asm.JLE)] = InstJump32JLEIMM
	instructions[asm.OpCode(asm.ALU64Class).SetJumpOp(asm.JLE)|asm.OpCode(asm.RegSource)] = InstJump64JLEReg
	instructions[asm.OpCode(asm.JumpClass).SetJumpOp(asm.JLE)|asm.OpCode(asm.RegSource)] = InstJump32JLEReg
	instructions[asm.OpCode(asm.JumpClass).SetJumpOp(asm.JSLT)] = InstJump64JSLTIMM
	instructions[asm.OpCode(asm.Jump32Class).SetJumpOp(asm.JSLT)] = InstJump32JSLTIMM
	instructions[asm.OpCode(asm.ALU64Class).SetJumpOp(asm.JSLT)|asm.OpCode(asm.RegSource)] = InstJump64JSLTReg
	instructions[asm.OpCode(asm.JumpClass).SetJumpOp(asm.JSLT)|asm.OpCode(asm.RegSource)] = InstJump32JSLTReg
	instructions[asm.OpCode(asm.JumpClass).SetJumpOp(asm.JSLE)] = InstJump64JSLEIMM
	instructions[asm.OpCode(asm.Jump32Class).SetJumpOp(asm.JSLE)] = InstJump32JSLEIMM
	instructions[asm.OpCode(asm.ALU64Class).SetJumpOp(asm.JSLE)|asm.OpCode(asm.RegSource)] = InstJump64JSLEReg
	instructions[asm.OpCode(asm.JumpClass).SetJumpOp(asm.JSLE)|asm.OpCode(asm.RegSource)] = InstJump32JSLEReg
}
